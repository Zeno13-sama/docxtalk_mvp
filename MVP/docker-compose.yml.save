version: '3.9'

services:
  postgres-db:
    container_name: postgres-db
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: bddocxtalk
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: introuvable145@
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - netcon
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: marcelnoumsi369@gmail.com
      PGADMIN_DEFAULT_PASSWORD: introuvable145@
    ports:
      - "5050:80"
    networks:
      - netcon
    restart: unless-stopped

  php-app:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: php-app
    user: "${UID}:${GID}" # Utilise l'utilisateur de l'hôte
    volumes:
      - ./api:/var/www/html
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./api/storage:/var/www/html/storage
    depends_on:
      - postgres-db
    networks:
      - netcon
    restart: unless-stopped
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    command: ["sh", "-c", ""]

  supervisor:
    build:
      context: ./supervisor
      dockerfile: Dockerfile
    container_name: supervisord
    volumes:
      - ./api:/var/www/html
    depends_on:
      - php-app
    networks:
      - netcon
    restart: unless-stopped

  web-app:
    build: ./app
    container_name: web-app
    stdin_open: true
    tty: true
    volumes:
      - ./app:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - postgres-db
      - php-app
    networks:
      - netcon
    restart: on-failure

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/conf.d/docx-talk.conf:/etc/nginx/conf.d/docx-talk.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - php-app
      - web-app
      - gunicorn
    networks:
      - netcon
    restart: unless-stopped

  gunicorn:
    build:
      context: .
      dockerfile: Dockerfile.gunicorn  # Créez un Dockerfile pour Gunicorn
    container_name: gunicorn
    volumes:
      - .:/app  # Montez votre code dans le conteneur
    ports:
      - "5000:5000"  # Exposez le port 5000
    networks:
      - netcon
    restart: unless-stopped

volumes:
  db_data:
    driver: local

networks:
  netcon:
    driver: bridge
